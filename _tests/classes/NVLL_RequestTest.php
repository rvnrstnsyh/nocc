<?php

/**
 * Test cases for NVLL_Request.
 *
 * Copyright 2010-2011 Tim Gerundt <tim@gerundt.de>
 * Copyright 2024 Rivane Rasetiansyah <re@nvll.me>
 *
 * This file is part of NVLL. NVLL is free software under the terms of the
 * GNU General Public License. You should have received a copy of the license
 * along with NVLL. If not, see <http://www.gnu.org/licenses>.
 */

require_once dirname(__FILE__) . '/../../classes/NVLL_Request.php';

/**
 * Test class for NVLL_Request.
 * Generated by PHPUnit on 2010-04-03 at 19:05:16.
 */
class NVLL_RequestTest extends PHPUnit\Framework\TestCase
{
    /**
     * @var array
     */
    protected $requestBackup;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->requestBackup = $_REQUEST;

        $_REQUEST['HelloWorldValue'] = 'Hello World!';
        $_REQUEST['TrueValue'] = 'true';
        $_REQUEST['FalseValue'] = 'false';
        $_REQUEST['1Value'] = '1';
        $_REQUEST['0Value'] = '0';
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void
    {
        $_REQUEST = $this->requestBackup;
    }

    /**
     * Test case for getStringValue().
     */
    public function testGetStringValue()
    {
        $this->assertEquals('', NVLL_Request::getStringValue(null), 'NULL');
        $this->assertEquals('', NVLL_Request::getStringValue(''), '');
        $this->assertEquals('', NVLL_Request::getStringValue('notexists'), 'notexists');

        $this->assertEquals('Hello World!', NVLL_Request::getStringValue('HelloWorldValue'), 'HelloWorldValue');
    }

    /**
     * Test case for getBoolValue().
     */
    public function testGetBoolValue()
    {
        $this->assertFalse(NVLL_Request::getBoolValue(null), 'NULL');
        $this->assertFalse(NVLL_Request::getBoolValue(''), '');
        $this->assertFalse(NVLL_Request::getBoolValue('notexists'), 'notexists');
        $this->assertFalse(NVLL_Request::getBoolValue('notexists', null), 'notexists, NULL');
        $this->assertTrue(NVLL_Request::getBoolValue('notexists', 1), 'notexists, 1');
        $this->assertTrue(NVLL_Request::getBoolValue('notexists', true), 'notexists, true');

        $this->assertTrue(NVLL_Request::getBoolValue('TrueValue'), 'TrueValue');
        $this->assertFalse(NVLL_Request::getBoolValue('FalseValue'), 'FalseValue');
        $this->assertTrue(NVLL_Request::getBoolValue('1Value'), '1Value');
        $this->assertFalse(NVLL_Request::getBoolValue('0Value'), '0Value');
    }

    /**
     * Test case for convertToBool().
     */
    public function testConvertToBool()
    {
        $this->assertFalse(NVLL_Request::convertToBool(null), 'NULL');
        $this->assertFalse(NVLL_Request::convertToBool(''), '');
        $this->assertFalse(NVLL_Request::convertToBool('bug'), 'bug');
        $this->assertFalse(NVLL_Request::convertToBool('99'), '99');

        $this->assertTrue(NVLL_Request::convertToBool(true), 'true');
        $this->assertTrue(NVLL_Request::convertToBool(1), '1');
        $this->assertTrue(NVLL_Request::convertToBool('true'), '"true"');
        $this->assertTrue(NVLL_Request::convertToBool('1'), '"1"');
        $this->assertTrue(NVLL_Request::convertToBool('TruE'), '"TruE"');

        $this->assertFalse(NVLL_Request::convertToBool(false), 'false');
        $this->assertFalse(NVLL_Request::convertToBool(0), '0');
        $this->assertFalse(NVLL_Request::convertToBool('false'), '"false"');
        $this->assertFalse(NVLL_Request::convertToBool('0'), '"0"');
        $this->assertFalse(NVLL_Request::convertToBool('FaLsE'), '"FaLsE"');
    }
}
